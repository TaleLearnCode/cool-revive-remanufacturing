using System.Net;

namespace Remanufacturing.Responses;

/// <summary>
/// Represents the details of a HTTP problem or error based off of RFC 7807.
/// </summary>
public class ProblemDetails : IResponse
{

	/// <summary>
	/// A URI reference that identifies the problem type. This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type.
	/// </summary>
	public string Type { get; set; } = null!;

	/// <summary>
	/// A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
	/// </summary>
	public string Title { get; set; } = null!;

	/// <summary>
	/// The HTTP status code generated by the origin server for this occurrence of the problem.
	/// </summary>
	public HttpStatusCode Status { get; set; }

	/// <summary>
	/// A human-readable explanation specific to this occurrence of the problem.
	/// </summary>
	public string? Detail { get; set; }

	/// <summary>
	/// A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
	/// </summary>
	public string? Instance { get; set; }

	/// <summary>
	/// Additional details about the problem that may be helpful when debugging the problem.
	/// </summary>
	public Dictionary<string, object>? Extensions { get; set; } = new Dictionary<string, object> { { "traceId", Guid.NewGuid() } };

	public ProblemDetails() { }

	public ProblemDetails(ArgumentException exception, string? instance = null)
	{
		Type = "https://example.net/validation-error"; // HACK: In a real-world scenario, you would want to provide a more-specific URI reference that identifies the response type.
		Title = "One or more validation errors occurred.";
		Status = HttpStatusCode.BadRequest;
		Detail = exception.Message;
		Instance = instance;
		if (exception.ParamName != null)
			Extensions = new Dictionary<string, object>
			{
				{ "traceId", Guid.NewGuid() },
				{ "errors", new Dictionary<string, string[]> { { exception.ParamName, new[] { exception.Message } } } }
		};
	}

}